{"ast":null,"code":"// import {\n//   FETCH_OBS_LIST,\n//   SORT_BY_COLUMN,\n//   APPLY_OBS_FILTERS,\n//   SET_FILTER_FORM_SELECTED,\n//   SET_OBS_COLUMNS,\n//   SET_OBS_SHOW_PHOTOS,\n//   UPDATE_OBS,\n//   SET_ITEM_LOADING, SET_CREATE_LOADING,\n//   CREATE_OBS, DELETE_OBS, SET_LOADING,\n// } from \"../actions/obs_actions\";\n\n// export function observations(state = null, action) {\n//   let new_observations;\n//   let index;\n//   switch (action.type) {\n//     case FETCH_OBS_LIST:\n//       console.log(\"fetched prelim list\");\n//       return action.payload;\n//     case UPDATE_OBS:\n//       new_observations = [...state];\n//       index = new_observations.findIndex((obs) => obs.id === action.payload.id);\n//       if (index !== -1) {\n//         new_observations[index] = action.payload;\n//       }\n//       return new_observations;\n//     case CREATE_OBS:\n//       new_observations = [...state, action.payload];\n//       return new_observations\n//     case DELETE_OBS:\n//       new_observations = [...state];\n//       index = new_observations.findIndex((obs) => obs.id === action.payload);\n//       if (index !== -1) {\n//         new_observations.splice(index, 1);\n//       }\n//       return new_observations;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_filtered(state = null, action) {\n//   switch (action.type) {\n//     case APPLY_OBS_FILTERS:\n//       console.log(\"writing filtered observations\");\n//       return action.payload;\n//     case SET_ITEM_LOADING:\n//       let new_observations;\n//       new_observations = [...state];\n//       const index = new_observations.findIndex((obs) => obs.id === action.payload);\n//       if (index !== -1) {\n//         new_observations[index].loading = true;\n//         console.log(\"set obsveration to loading\");\n//       }\n//       return new_observations;\n//     case SORT_BY_COLUMN:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_filters_set(state = null, action) {\n//   switch (action.type) {\n//     case SET_FILTER_FORM_SELECTED:\n//       \"entered filters reducer\";\n//       let copiedState = Object.assign({}, state);\n//       copiedState[action.payload.field] = action.payload.selected;\n//       return copiedState;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_columns(state = null, action) {\n//   switch (action.type) {\n//     case SET_OBS_COLUMNS:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_show_photos(state = null, action) {\n//   switch (action.type) {\n//     case SET_OBS_SHOW_PHOTOS:\n//       return !state;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function create_loading(state = null, action) {\n//   switch (action.type) {\n//     case SET_CREATE_LOADING:\n//       return action.payload\n//     case CREATE_OBS:\n//       return false;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_loading(state = null, action) {\n//   switch (action.type) {\n//     case SET_LOADING:\n//       return action.payload\n//     case FETCH_OBS_LIST:\n//       return false;\n//     case UPDATE_OBS:\n//       return false;\n//     case DELETE_OBS:\n//       return false;\n//     case CREATE_OBS:\n//       return false;\n//     default:\n//       return state;\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Phil Work/Documents/Coding Projects HD/ProcorePython/frontend/src/redux/reducers/obs_reducers.js"],"sourcesContent":["// import {\n//   FETCH_OBS_LIST,\n//   SORT_BY_COLUMN,\n//   APPLY_OBS_FILTERS,\n//   SET_FILTER_FORM_SELECTED,\n//   SET_OBS_COLUMNS,\n//   SET_OBS_SHOW_PHOTOS,\n//   UPDATE_OBS,\n//   SET_ITEM_LOADING, SET_CREATE_LOADING,\n//   CREATE_OBS, DELETE_OBS, SET_LOADING,\n// } from \"../actions/obs_actions\";\n\n\n// export function observations(state = null, action) {\n//   let new_observations;\n//   let index;\n//   switch (action.type) {\n//     case FETCH_OBS_LIST:\n//       console.log(\"fetched prelim list\");\n//       return action.payload;\n//     case UPDATE_OBS:\n//       new_observations = [...state];\n//       index = new_observations.findIndex((obs) => obs.id === action.payload.id);\n//       if (index !== -1) {\n//         new_observations[index] = action.payload;\n//       }\n//       return new_observations;\n//     case CREATE_OBS:\n//       new_observations = [...state, action.payload];\n//       return new_observations\n//     case DELETE_OBS:\n//       new_observations = [...state];\n//       index = new_observations.findIndex((obs) => obs.id === action.payload);\n//       if (index !== -1) {\n//         new_observations.splice(index, 1);\n//       }\n//       return new_observations;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_filtered(state = null, action) {\n//   switch (action.type) {\n//     case APPLY_OBS_FILTERS:\n//       console.log(\"writing filtered observations\");\n//       return action.payload;\n//     case SET_ITEM_LOADING:\n//       let new_observations;\n//       new_observations = [...state];\n//       const index = new_observations.findIndex((obs) => obs.id === action.payload);\n//       if (index !== -1) {\n//         new_observations[index].loading = true;\n//         console.log(\"set obsveration to loading\");\n//       }\n//       return new_observations;\n//     case SORT_BY_COLUMN:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_filters_set(state = null, action) {\n//   switch (action.type) {\n//     case SET_FILTER_FORM_SELECTED:\n//       \"entered filters reducer\";\n//       let copiedState = Object.assign({}, state);\n//       copiedState[action.payload.field] = action.payload.selected;\n//       return copiedState;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_columns(state = null, action) {\n//   switch (action.type) {\n//     case SET_OBS_COLUMNS:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_show_photos(state = null, action) {\n//   switch (action.type) {\n//     case SET_OBS_SHOW_PHOTOS:\n//       return !state;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function create_loading(state = null, action) {\n//   switch (action.type) {\n//     case SET_CREATE_LOADING:\n//       return action.payload\n//     case CREATE_OBS:\n//       return false;\n//     default:\n//       return state;\n//   }\n// }\n\n// export function obs_loading(state = null, action) {\n//   switch (action.type) {\n//     case SET_LOADING:\n//       return action.payload\n//     case FETCH_OBS_LIST:\n//       return false;\n//     case UPDATE_OBS:\n//       return false;\n//     case DELETE_OBS:\n//       return false;\n//     case CREATE_OBS:\n//       return false;\n//     default:\n//       return state;\n//   }\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}